# HG changeset patch
# Parent 447b636fa6f0c625bea5ed3569dd4098ccde9831

--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -2981,8 +2981,9 @@ static inline void skb_checksum_none_ass
 
 #if defined(CONFIG_PPA_PUMA7) && !defined(CONFIG_ARM_AVALANCHE_SOC)
 struct skb_buf_manager_cb {
-    bool (*is_bm_skb)(struct sk_buff *skb);
-    int  (*bm_free_skb)(struct sk_buff *skb);
+	bool (*is_bm_skb)(struct sk_buff *skb);
+	int  (*bm_free_skb)(struct sk_buff *skb);
+	void (*bm_clear_skb)(struct sk_buff *skb);
 };
 
 int skb_register_buf_manager(struct skb_buf_manager_cb *cb);
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -3894,21 +3894,21 @@ EXPORT_SYMBOL_GPL(skb_gso_transport_segl
 #if defined(CONFIG_PPA_PUMA7) && !defined(CONFIG_ARM_AVALANCHE_SOC)
 int skb_register_buf_manager(struct skb_buf_manager_cb *cb)
 {
-    if (bm_cb.is_bm_skb) {
-        pr_err("buffer manager already registered\n");
-        return 1;
-        }
+	if (bm_cb.is_bm_skb) {
+		pr_err("buffer manager already registered\n");
+		return 1;
+	}
 
-    pr_info("skb buffer manager registered\n");
-    memcpy(&bm_cb, cb, sizeof(bm_cb));
-    return 0;
+	pr_info("skb buffer manager registered\n");
+	memcpy(&bm_cb, cb, sizeof(bm_cb));
+	return 0;
 }
 EXPORT_SYMBOL_GPL(skb_register_buf_manager);
 
 int skb_unregister_buf_manager(void)
 {
-    pr_info("skb buffer manager unregistered\n");
-    memset(&bm_cb, 0, sizeof(bm_cb));
+	pr_info("skb buffer manager unregistered\n");
+	memset(&bm_cb, 0, sizeof(bm_cb));
 }
 EXPORT_SYMBOL_GPL(skb_unregister_buf_manager);
 
