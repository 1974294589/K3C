# HG changeset patch
# Parent 78848a76eb09237713805a24b4a3a826c109490c

--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -408,7 +408,13 @@ struct sock {
 	int			(*sk_backlog_rcv)(struct sock *sk,
 						  struct sk_buff *skb);
 	void                    (*sk_destruct)(struct sock *sk);
+	uint32_t		acceleration_flag;
 };
+enum toe_acceleration_flag_set_act {
+	SOCKET_ALLOCATE,
+	SOCKET_RELEASE
+};
+extern int (*toe_acceleration_flag_set_hook)(struct sock *, struct pid *, enum toe_acceleration_flag_set_act);
 
 #define __sk_user_data(sk) ((*((void __rcu **)&(sk)->sk_user_data)))
 
--- a/net/socket.c
+++ b/net/socket.c
@@ -336,6 +336,9 @@ static struct file_system_type sock_fs_t
 	.kill_sb =	kill_anon_super,
 };
 
+int (*toe_acceleration_flag_set_hook)(struct sock *, struct pid *, enum toe_acceleration_flag_set_act);
+EXPORT_SYMBOL(toe_acceleration_flag_set_hook);
+
 /*
  *	Obtains the first available file descriptor and sets it up for use.
  *
@@ -386,6 +389,11 @@ struct file *sock_alloc_file(struct sock
 	sock->file = file;
 	file->f_flags = O_RDWR | (flags & O_NONBLOCK);
 	file->private_data = sock;
+	if (sock->sk) {
+		if (toe_acceleration_flag_set_hook) {
+			toe_acceleration_flag_set_hook(sock->sk, find_get_pid(task_pid_nr(current)), SOCKET_ALLOCATE);
+		}
+	}
 	return file;
 }
 EXPORT_SYMBOL(sock_alloc_file);
@@ -584,6 +592,11 @@ const struct file_operations bad_sock_fo
 
 void sock_release(struct socket *sock)
 {
+	if (sock->sk) {
+		if (toe_acceleration_flag_set_hook) {
+			toe_acceleration_flag_set_hook(sock->sk, find_get_pid(task_pid_nr(current)), SOCKET_RELEASE);
+		}
+	}
 	if (sock->ops) {
 		struct module *owner = sock->ops->owner;
 
