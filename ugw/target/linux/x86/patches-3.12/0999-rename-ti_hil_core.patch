# HG changeset patch
# Parent 5284eb5b5aefd8180dde8bb541c841cf87cbe5c8

--- a/net/ti/Makefile
+++ b/net/ti/Makefile
@@ -22,5 +22,4 @@
 #    2200 Mission College Blvd.
 #    Santa Clara, CA  97052
 
-obj-y :=
 obj-$(CONFIG_TI_PACKET_PROCESSOR) += pp/
--- a/net/ti/pp/Makefile
+++ b/net/ti/pp/Makefile
@@ -21,5 +21,6 @@
 #    Intel Corporation
 #    2200 Mission College Blvd.
 #    Santa Clara, CA  97052
-
-obj-y +=  ti_hil_core.o
+ifdef CONFIG_APPCPU_GW_PP_HANDLE
+obj-y +=  ti_hil_core_gw.o
+endif
--- a/net/ti/pp/ti_hil_core.c
+++ /dev/null
@@ -1,213 +0,0 @@
-/*
-  GPL LICENSE SUMMARY
-
-  Copyright(c) 2016 Intel Corporation.
-
-  This program is free software; you can redistribute it and/or modify
-  it under the terms of version 2 of the GNU General Public License as
-  published by the Free Software Foundation.
-
-  This program is distributed in the hope that it will be useful, but
-  WITHOUT ANY WARRANTY; without even the implied warranty of
-  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-  General Public License for more details.
-
-  You should have received a copy of the GNU General Public License
-  along with this program; if not, write to the Free Software
-  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
-  The full GNU General Public License is included in this distribution
-  in the file called LICENSE.GPL.
-
-  Contact Information:
-    Intel Corporation
-    2200 Mission College Blvd.
-    Santa Clara, CA  97052
-*/
-
-/**************************************************************************
- * FUNCTION NAME : ti_hil_pp_event
- **************************************************************************
- * DESCRIPTION   :
- *  Placeholder for the hil event notifyer.  Remove when full hil layer
- *  is ported to the Atom SDK.
- *
- * RETURNS       :
- *  0   -   Success
- *  <0  -   Error
- **************************************************************************/
-
-#include <linux/kernel.h>
-#include <linux/byteorder/generic.h>
-#include <linux/ti_hil.h>
-#ifdef CONFIG_NETFILTER
-#include <linux/netfilter.h>
-#include <net/netfilter/nf_conntrack.h>
-#include <net/netfilter/nf_conntrack_helper.h>
-#include <linux/netfilter_ipv4/ip_tables.h>
-#endif
-
-#ifdef CONFIG_APPCPU_GW_PP_HANDLE
-#include <linux/skbuff.h>
-#include <linux/netdevice.h>
-
-static unsigned int notifier_list_was_init = 0;
-static struct   atomic_notifier_head notifier_list;
-static unsigned int dropped_packets_bit_map;
-
-#define DROPPED_PACKETS_BITMAP_IS_SET(__n)          ((dropped_packets_bit_map & (1 << (__n))) != 0)
-
-static int hil_core_register_notifier_block(struct notifier_block *nb)
-{
-    if(!notifier_list_was_init)
-    {
-        notifier_list_was_init = 1;
-        ATOMIC_INIT_NOTIFIER_HEAD(&notifier_list);
-    }
-    atomic_notifier_chain_register(&notifier_list, nb);
-    return 0;
-}
-EXPORT_SYMBOL(hil_core_register_notifier_block);
-
-static int hil_core_unregister_notifier_block(struct notifier_block *nb)
-{
-    if(!notifier_list_was_init)
-    {
-        return 0;
-    }
-
-    atomic_notifier_chain_unregister(&notifier_list, nb);
-    return 0;
-}
-EXPORT_SYMBOL(hil_core_unregister_notifier_block);
-
-/*!
- * \fn create_drop_session
- * \brief store the event in the pp info and send the packet to the ARM using data pipe
- *
- * \param sk_buff* skb to be sent
- * \param event    the specific drop event value
-*/
-int create_drop_session(struct sk_buff* skb, unsigned long event)
-{
-    struct hil_core_notifier_param param;
-    unsigned int flags;
-
-    /* Read current flags */
-    flags = ntohl(skb->pp_packet_info->flags);
-
-    /* Store event in flags */
-    flags |= (event << TI_HIL_PACKET_FLAG_PP_SESSION_DROP_OFFSET );
-
-    /* Convert new flags back to network byte order */
-    skb->pp_packet_info->flags = htonl(flags);
-
-    param.skb = skb;
-    atomic_notifier_call_chain(&notifier_list, 0, &param);
-    return 0;
-}
-#endif /* CONFIG_APPCPU_GW_PP_HANDLE */
-
-int ti_hil_pp_event(unsigned long event, void *v)
-{
-    struct sk_buff*              skb;
-    unsigned int                 flags;
-    struct xt_table              *xt;
-    /* Handle only the events currently supported in Atom SDK */
-    switch (event)
-    {
-        case TI_BRIDGE_PACKET_FLOODED:
-        {
-            /* Event indicates that the packet will now be flooded onto all interfaces. This can happen in any of the following cases:-
-             *  a) Unicast packet but no matching FDB entry is found.
-             *  b) Broadcast packet
-             *  c) Multicast packet but no layer2 extensions eg IGMP snooping exists */
-            skb = (struct sk_buff*) v;
-
-            /* Convert existing flags to host byte order */
-            flags = ntohl(skb->pp_packet_info->flags);
-
-            /* In the intrusive mode profile these packets are not considered as candidates for acceleration so mark the packet BYPASS mode so that the egress hook is bypassed */
-            flags |= TI_HIL_PACKET_FLAG_PP_SESSION_BYPASS;
-
-            /* Convert new flags back to network byte order */
-            skb->pp_packet_info->flags = htonl(flags);
-
-            break;
-        }
-#ifdef CONFIG_APPCPU_GW_PP_HANDLE
-        case TI_IP_DISCARD_PKT_IPV4:
-        case TI_IP_DISCARD_PKT_IPV6:
-            if (((event == TI_IP_DISCARD_PKT_IPV4) && DROPPED_PACKETS_BITMAP_IS_SET(4)) ||
-                ((event == TI_IP_DISCARD_PKT_IPV6) && DROPPED_PACKETS_BITMAP_IS_SET(6)))
-            {
-                	/* Hanlde event*/
-            }
-            else
-            {
-			break;  /* Appropriate bit is not set, discard event */
-            }
-#ifdef CONFIG_NETFILTER
-        case TI_CT_NETFILTER_DISCARD_PKT:
-#endif
-        {
-            struct sk_buff* new_skb  = NULL;
-            skb = (struct sk_buff *)v;
-
-	    if (!skb)
-            {
-		printk(KERN_NOTICE "%s[%u]: Recevied null skb. Failed to create drop session  \n", __FUNCTION__, __LINE__);
-                break;
-            }
-
-	    if (skb->pp_packet_info->input_device_index == 0)
-            {
-		break;
-            }
-
-	    if(0 == skb->len)
-            {
-                break;
-            }
-
-	    new_skb  = dev_alloc_skb(2048);
-	    if(!new_skb)
-	    {
-		printk(KERN_NOTICE "%s[%u]: failed to alloc skb \n", __FUNCTION__, __LINE__);
-		break;
-	    }
-
-            memcpy(new_skb->pp_packet_info, skb->pp_packet_info, sizeof(PP_PACKET_INFO_t));
-            memcpy(new_skb->data, skb->data, skb->len);
-            skb_put(new_skb, skb->len);
-
-            create_drop_session(new_skb, event);
-            break;
-	}
-
-        case TI_CT_NETFILTER_TABLE_UPDATE:
-        {
-            xt = (struct xt_table *)v; /* Get the netfilter table */
-
-            /* Flush all sessions only for NAT... No need to do anything for Mangle and Firewall */
-            if (strcmp (xt->name, "nat") == 0 || strcmp (xt->name, "filter") == 0)
-            {
-                /*pp_client MRPC call to invoke flush avalanche API on ARM to flush the session*/
-                if (avalanche_pp_flush_sessions( AVALANCHE_PP_MAX_VPID, PP_LIST_ID_ALL ) != PP_RC_SUCCESS)
-                {
-                    printk ("Error: Unable to flush all sessions\n");
-                    return 0;
-                }
-                printk ("NAT Table update all sessions flushed\n");
-            }
-            break;
-        }
-#endif /*  CONFIG_APPCPU_GW_PP_HANDLE */
-        default:
-        {
-            printk (KERN_NOTICE "Intrusive -> Does not handle event 0x%x\n", event);
-            break;
-        }
-
-    }
-    return 0;
-}
--- /dev/null
+++ b/net/ti/pp/ti_hil_core_gw.c
@@ -0,0 +1,213 @@
+/*
+  GPL LICENSE SUMMARY
+
+  Copyright(c) 2016 Intel Corporation.
+
+  This program is free software; you can redistribute it and/or modify
+  it under the terms of version 2 of the GNU General Public License as
+  published by the Free Software Foundation.
+
+  This program is distributed in the hope that it will be useful, but
+  WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+  General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+  The full GNU General Public License is included in this distribution
+  in the file called LICENSE.GPL.
+
+  Contact Information:
+    Intel Corporation
+    2200 Mission College Blvd.
+    Santa Clara, CA  97052
+*/
+
+/**************************************************************************
+ * FUNCTION NAME : ti_hil_pp_event
+ **************************************************************************
+ * DESCRIPTION   :
+ *  Placeholder for the hil event notifyer.  Remove when full hil layer
+ *  is ported to the Atom SDK.
+ *
+ * RETURNS       :
+ *  0   -   Success
+ *  <0  -   Error
+ **************************************************************************/
+
+#include <linux/kernel.h>
+#include <linux/byteorder/generic.h>
+#include <linux/ti_hil.h>
+#ifdef CONFIG_NETFILTER
+#include <linux/netfilter.h>
+#include <net/netfilter/nf_conntrack.h>
+#include <net/netfilter/nf_conntrack_helper.h>
+#include <linux/netfilter_ipv4/ip_tables.h>
+#endif
+
+#ifdef CONFIG_APPCPU_GW_PP_HANDLE
+#include <linux/skbuff.h>
+#include <linux/netdevice.h>
+
+static unsigned int notifier_list_was_init = 0;
+static struct   atomic_notifier_head notifier_list;
+static unsigned int dropped_packets_bit_map;
+
+#define DROPPED_PACKETS_BITMAP_IS_SET(__n)          ((dropped_packets_bit_map & (1 << (__n))) != 0)
+
+static int hil_core_register_notifier_block(struct notifier_block *nb)
+{
+    if(!notifier_list_was_init)
+    {
+        notifier_list_was_init = 1;
+        ATOMIC_INIT_NOTIFIER_HEAD(&notifier_list);
+    }
+    atomic_notifier_chain_register(&notifier_list, nb);
+    return 0;
+}
+EXPORT_SYMBOL(hil_core_register_notifier_block);
+
+static int hil_core_unregister_notifier_block(struct notifier_block *nb)
+{
+    if(!notifier_list_was_init)
+    {
+        return 0;
+    }
+
+    atomic_notifier_chain_unregister(&notifier_list, nb);
+    return 0;
+}
+EXPORT_SYMBOL(hil_core_unregister_notifier_block);
+
+/*!
+ * \fn create_drop_session
+ * \brief store the event in the pp info and send the packet to the ARM using data pipe
+ *
+ * \param sk_buff* skb to be sent
+ * \param event    the specific drop event value
+*/
+int create_drop_session(struct sk_buff* skb, unsigned long event)
+{
+    struct hil_core_notifier_param param;
+    unsigned int flags;
+
+    /* Read current flags */
+    flags = ntohl(skb->pp_packet_info->flags);
+
+    /* Store event in flags */
+    flags |= (event << TI_HIL_PACKET_FLAG_PP_SESSION_DROP_OFFSET );
+
+    /* Convert new flags back to network byte order */
+    skb->pp_packet_info->flags = htonl(flags);
+
+    param.skb = skb;
+    atomic_notifier_call_chain(&notifier_list, 0, &param);
+    return 0;
+}
+#endif /* CONFIG_APPCPU_GW_PP_HANDLE */
+
+int ti_hil_pp_event(unsigned long event, void *v)
+{
+    struct sk_buff*              skb;
+    unsigned int                 flags;
+    struct xt_table              *xt;
+    /* Handle only the events currently supported in Atom SDK */
+    switch (event)
+    {
+        case TI_BRIDGE_PACKET_FLOODED:
+        {
+            /* Event indicates that the packet will now be flooded onto all interfaces. This can happen in any of the following cases:-
+             *  a) Unicast packet but no matching FDB entry is found.
+             *  b) Broadcast packet
+             *  c) Multicast packet but no layer2 extensions eg IGMP snooping exists */
+            skb = (struct sk_buff*) v;
+
+            /* Convert existing flags to host byte order */
+            flags = ntohl(skb->pp_packet_info->flags);
+
+            /* In the intrusive mode profile these packets are not considered as candidates for acceleration so mark the packet BYPASS mode so that the egress hook is bypassed */
+            flags |= TI_HIL_PACKET_FLAG_PP_SESSION_BYPASS;
+
+            /* Convert new flags back to network byte order */
+            skb->pp_packet_info->flags = htonl(flags);
+
+            break;
+        }
+#ifdef CONFIG_APPCPU_GW_PP_HANDLE
+        case TI_IP_DISCARD_PKT_IPV4:
+        case TI_IP_DISCARD_PKT_IPV6:
+            if (((event == TI_IP_DISCARD_PKT_IPV4) && DROPPED_PACKETS_BITMAP_IS_SET(4)) ||
+                ((event == TI_IP_DISCARD_PKT_IPV6) && DROPPED_PACKETS_BITMAP_IS_SET(6)))
+            {
+                	/* Hanlde event*/
+            }
+            else
+            {
+			break;  /* Appropriate bit is not set, discard event */
+            }
+#ifdef CONFIG_NETFILTER
+        case TI_CT_NETFILTER_DISCARD_PKT:
+#endif
+        {
+            struct sk_buff* new_skb  = NULL;
+            skb = (struct sk_buff *)v;
+
+	    if (!skb)
+            {
+		printk(KERN_NOTICE "%s[%u]: Recevied null skb. Failed to create drop session  \n", __FUNCTION__, __LINE__);
+                break;
+            }
+
+	    if (skb->pp_packet_info->input_device_index == 0)
+            {
+		break;
+            }
+
+	    if(0 == skb->len)
+            {
+                break;
+            }
+
+	    new_skb  = dev_alloc_skb(2048);
+	    if(!new_skb)
+	    {
+		printk(KERN_NOTICE "%s[%u]: failed to alloc skb \n", __FUNCTION__, __LINE__);
+		break;
+	    }
+
+            memcpy(new_skb->pp_packet_info, skb->pp_packet_info, sizeof(PP_PACKET_INFO_t));
+            memcpy(new_skb->data, skb->data, skb->len);
+            skb_put(new_skb, skb->len);
+
+            create_drop_session(new_skb, event);
+            break;
+	}
+
+        case TI_CT_NETFILTER_TABLE_UPDATE:
+        {
+            xt = (struct xt_table *)v; /* Get the netfilter table */
+
+            /* Flush all sessions only for NAT... No need to do anything for Mangle and Firewall */
+            if (strcmp (xt->name, "nat") == 0 || strcmp (xt->name, "filter") == 0)
+            {
+                /*pp_client MRPC call to invoke flush avalanche API on ARM to flush the session*/
+                if (avalanche_pp_flush_sessions( AVALANCHE_PP_MAX_VPID, PP_LIST_ID_ALL ) != PP_RC_SUCCESS)
+                {
+                    printk ("Error: Unable to flush all sessions\n");
+                    return 0;
+                }
+                printk ("NAT Table update all sessions flushed\n");
+            }
+            break;
+        }
+#endif /*  CONFIG_APPCPU_GW_PP_HANDLE */
+        default:
+        {
+            printk (KERN_NOTICE "Intrusive -> Does not handle event 0x%x\n", event);
+            break;
+        }
+
+    }
+    return 0;
+}
