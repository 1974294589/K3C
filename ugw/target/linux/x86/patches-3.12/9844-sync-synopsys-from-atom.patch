# HG changeset patch
# Parent 494e23611afdd69bcc629d0b050cf070eb43b107

--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c
@@ -371,8 +371,8 @@ static void DWC_ETH_QOS_wrapper_rx_descr
 	desc_data->skb_realloc_idx = 0;
 	desc_data->skb_realloc_threshold = MIN_RX_DESC_CNT;
 	desc_data->pkt_received = 0;
-	hw_if->rx_desc_init(pdata, qInx);
 	desc_data->cur_rx = 0;
+	hw_if->rx_desc_init(pdata, qInx);
 
 	DBGPR("<--DWC_ETH_QOS_wrapper_rx_descriptor_init_single_q\n");
 }
@@ -845,6 +845,7 @@ static int DWC_ETH_QOS_map_page_buffs(st
  * \retval count â€“ number of packet to be programmed in the descriptor or
  * zero on failure.
  */
+
 static unsigned int DWC_ETH_QOS_map_skb(struct net_device *dev,
 					struct sk_buff *skb)
 {
@@ -1003,7 +1004,6 @@ err_out_dma_map_fail:
 *
 * \return void
 */
-
 static void DWC_ETH_QOS_unmap_tx_skb(struct DWC_ETH_QOS_prv_data *pdata,
 				     struct DWC_ETH_QOS_tx_buffer *buffer)
 {
@@ -1033,6 +1033,7 @@ static void DWC_ETH_QOS_unmap_tx_skb(str
 		buffer->len2 = 0;
 	}
 
+
 	if (buffer->skb != NULL) {
 		dev_kfree_skb_any(buffer->skb);
 		buffer->skb = NULL;
@@ -1050,12 +1051,13 @@ static void DWC_ETH_QOS_unmap_tx_skb(str
  *
  * \return void
  */
+
 static void DWC_ETH_QOS_unmap_rx_skb(struct DWC_ETH_QOS_prv_data *pdata,
 				     struct DWC_ETH_QOS_rx_buffer *buffer)
 {
 	DBGPR("-->DWC_ETH_QOS_unmap_rx_skb\n");
 
-	/* Unmap the first buffer */
+	/* unmap the first buffer */
 	if (buffer->dma) {
 		if (pdata->rx_split_hdr) {
 			dma_unmap_single(&pdata->pdev->dev, buffer->dma,
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
@@ -1628,7 +1628,7 @@ static int enable_rx_flow_ctrl(void)
 static int stop_dma_rx(uint32_t qInx)
 {
    int retryCount = 10;
-   uint32_t ch_state = 0;
+   volatile uint32_t ch_state;
    int ret = Y_SUCCESS;
 
    /* issue Rx dma stop command */
@@ -1699,7 +1699,7 @@ static int start_dma_rx(uint32_t qInx)
 static int stop_dma_tx(uint32_t qInx)
 {
    int retryCount = 10;
-   uint32_t ch_state = 0;
+   volatile uint32_t ch_state;
    int ret = Y_SUCCESS;
 
    /* issue Tx dma stop command */
@@ -1964,7 +1964,7 @@ static int write_phy_regs(int phy_id, in
    int ret = Y_SUCCESS;
    /* Wait for any previous MII read/write operation to complete */
    while (DWC_REG_RD_BIT(MAC_MDIO_AR, MAC_MDIO_AR_GB) && --retryCount)
-      udelay(10);
+      mdelay(1);
    if (!retryCount) {
       ret = -Y_FAILURE;
    } else {
@@ -1984,6 +1984,17 @@ static int write_phy_regs(int phy_id, in
       VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_GMIIR, phy_reg);
       VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_PA, phy_id);
       DWC_REG_WR(MAC_MDIO_AR, varMAC_MDIOAR);
+
+      /* Delay operation 10uSec */
+      udelay(10);
+      /* Wait for MII write operation to complete */
+      retryCount = 1000;
+      while (DWC_REG_RD_BIT(MAC_MDIO_AR, MAC_MDIO_AR_GB) && --retryCount)
+         mdelay(1);
+      if (!retryCount)
+         ret = -Y_FAILURE;
+   }
+
    return ret;
 }
 
@@ -2002,7 +2013,7 @@ static int read_phy_regs(int phy_id, int
    int ret = Y_SUCCESS;
    /* Wait for any previous MII read/write operation to complete */
    while (DWC_REG_RD_BIT(MAC_MDIO_AR, MAC_MDIO_AR_GB) && --retryCount)
-      udelay(10);
+      mdelay(1);
    if (!retryCount) {
       ret = -Y_FAILURE;
    } else {
@@ -2026,7 +2037,7 @@ static int read_phy_regs(int phy_id, int
       /* Wait for MII write operation to complete */
       retryCount = 1000;
       while (DWC_REG_RD_BIT(MAC_MDIO_AR, MAC_MDIO_AR_GB) && --retryCount)
-         udelay(10);
+         mdelay(1);
       if (!retryCount) {
          ret = -Y_FAILURE;
       } else {
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
@@ -66,13 +66,47 @@ MODULE_PARM_DESC(q_op_mode,
 
 #ifdef GBE_DEBUG
 
+#define __dwc_dump_skb(skb) \
+do { \
+	pr_err("skb %p: skb->sk=%p, skb->dev=%s, skb_dst(skb)->dev=%s," \
+		 " skb->len=%d, skb->hdr_len=%d, skb->skb_iif=%d, skb->queue_mapping=%d," \
+		 " skb_mac_header(skb)=%p, skb_network_header(skb)=%p," \
+		 " skb_transport_header(skb)=%p, skb->head=%p, skb->data=%p, skb->tail=%p," \
+		 " skb->end=%p\n", \
+		skb, skb->sk,	\
+		skb->dev ? skb->dev->name : "NULL", \
+		skb_dst(skb) ? (skb_dst(skb)->dev ? skb_dst(skb)->dev->name : "NA") : "NA", \
+		skb->len, skb->hdr_len, skb->skb_iif, skb->queue_mapping, \
+		skb_mac_header(skb), skb_network_header(skb), \
+		skb_transport_header(skb), skb->head, skb->data, skb->tail, \
+		skb->end); \
+	pr_err("eth header: src=%pM, dst=%pM, proto=%d\n", \
+		eth_hdr(skb)->h_source, eth_hdr(skb)->h_dest, eth_hdr(skb)->h_proto); \
+	if (ip_hdr(skb) && ip_hdr(skb)->version == 4) { \
+		pr_err("ip header: src=%pI4, dst=%pI4, protocol=%d (%s)\n", \
+			&ip_hdr(skb)->saddr, &ip_hdr(skb)->daddr, ip_hdr(skb)->protocol, \
+			ip_hdr(skb)->protocol == IPPROTO_TCP ? "tcp" : \
+			(ip_hdr(skb)->protocol == IPPROTO_UDP ? "udp" : "")); \
+	} else if (ip_hdr(skb) && ip_hdr(skb)->version == 6) { \
+		pr_err("ip header: src=%pI6, dst=%pI6, nexthdr=%d (%s)\n", \
+			&ipv6_hdr(skb)->saddr, &ipv6_hdr(skb)->daddr, ipv6_hdr(skb)->nexthdr, \
+			ipv6_hdr(skb)->nexthdr == IPPROTO_TCP ? "tcp" : \
+			(ipv6_hdr(skb)->nexthdr == IPPROTO_UDP ? "udp" : "")); \
+	} else { \
+		pr_err("not an IP packet\n"); \
+	} \
+} while (0);
+
 extern bool print_tx_pkts;
 extern bool print_rx_pkts;
 
 #define PRINT_SKB_INFO(MSG, PARAM, SKB) \
-   printk(KERN_INFO MSG "Data[0x%08x] Tail[0x%08x] End[0x%08x]\n", \
-          PARAM, (uint32_t)(SKB)->data, \
-          (uint32_t)(SKB)->tail, (uint32_t)(SKB)->end)
+do { \
+   printk(KERN_INFO MSG "Data[0x%08x] Tail[0x%08x] End[0x%08x]\n",\
+             PARAM, (uint32_t)(SKB)->data, \
+             (uint32_t)(SKB)->tail, (uint32_t)(SKB)->end);\
+   __dwc_dump_skb(skb); \
+} while (0);
 
 static inline void print_skb(struct sk_buff *skb, bool isRx)
 {
@@ -520,8 +554,7 @@ irqreturn_t DWC_ETH_QOS_ISR(int irq, voi
    if (pdata->version == MAC_VER_4_00) {
       // Read and clear interrupt in Atom Interrupt Controller
       atom_ims = GBE_REG_RD(GBE_ATOM_IMS); //Interrupts are cleared when IMS is read
-      if (!VAR32_GET_BIT(atom_ims, GBE_ATOM_INTC) &&
-          !(pdata->power_state & DWC_ETH_QOS_NETIP_PWRDWN))
+      if (!VAR32_GET_BIT(atom_ims, GBE_ATOM_INTC))
          printk(KERN_ALERT "GMAC5 interrupt with bit not set on IC!\n");
    }
 
@@ -2733,8 +2766,6 @@ static int DWC_ETH_QOS_clean_split_hdr_r
             } else {
                /* this is the middle of a chain */
                payload_len = pdata->rx_buffer_len;
-               /* skb_top must not be NULL for a middle descriptor */
-               BUG_ON(desc_data->skb_top == NULL);
                skb_fill_page_desc(desc_data->skb_top,
                   skb_shinfo(desc_data->skb_top)->nr_frags,
                   buffer->page2, 0,
@@ -2761,8 +2792,6 @@ static int DWC_ETH_QOS_clean_split_hdr_r
                      buffer->rx_hdr_size);
                }
 
-               /* skb_top must not be NULL for the last descriptor */
-               BUG_ON(desc_data->skb_top == NULL);
                skb_fill_page_desc(desc_data->skb_top,
                   skb_shinfo(desc_data->skb_top)->nr_frags,
                   buffer->page2, 0,
@@ -2980,21 +3009,18 @@ static int DWC_ETH_QOS_clean_jumbo_rx_ir
                   pdata->rx_buffer_len);
 
                DBGPR("RX: pkt in second buffer pointer\n");
-               /* skb_top must not be NULL for the first descriptor */
-               BUG_ON(desc_data->skb_top == NULL);
                skb_fill_page_desc(
                   desc_data->skb_top,
                   skb_shinfo(desc_data->skb_top)->nr_frags,
                   buffer->page2, 0,
                   pdata->rx_buffer_len);
             } else {
-               /* skb_top must not be NULL for a middle descriptor */
-               BUG_ON(desc_data->skb_top == NULL);
                /* this is the middle of a chain */
                skb_fill_page_desc(desc_data->skb_top,
                   skb_shinfo(desc_data->skb_top)->nr_frags,
                   buffer->page, 0,
                   pdata->rx_buffer_len);
+
                DBGPR("RX: pkt in second buffer pointer\n");
                skb_fill_page_desc(desc_data->skb_top,
                   skb_shinfo(desc_data->skb_top)->nr_frags,
@@ -3013,8 +3039,6 @@ static int DWC_ETH_QOS_clean_jumbo_rx_ir
                /* end of the chain */
                pkt_len =
                   (pkt_len - (pdata->rx_buffer_len * intermediate_desc_cnt));
-               /* skb_top must not be NULL for the last descriptor */
-               BUG_ON(desc_data->skb_top == NULL);
                if (pkt_len > pdata->rx_buffer_len) {
                   skb_fill_page_desc(desc_data->skb_top,
                      skb_shinfo(desc_data->skb_top)->nr_frags,
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c
@@ -159,7 +159,7 @@ static int DWC_ETH_QOS_mdio_read(struct
 	struct net_device *dev = bus->priv;
 	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
 	hw_interface_t *hw_if = &(pdata->hw_if);
-	int phydata = 0;
+	int phydata;
 
 	DBGPR_MDIO("--> DWC_ETH_QOS_mdio_read: phyaddr = %d, phyreg = %d\n",
 	      phyaddr, phyreg);
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
@@ -72,15 +72,15 @@ bool print_desc = false;
 uint metadata_on_crc = 0;
 uint mss_for_tso = 0;
 
-module_param(print_tx_pkts, bool, S_IRUGO);
+module_param(print_tx_pkts, bool, 0644);
 MODULE_PARM_DESC(print_tx_pkts, "Dump Tx packets");
-module_param(print_rx_pkts, bool, S_IRUGO);
+module_param(print_rx_pkts, bool, 0644);
 MODULE_PARM_DESC(print_rx_pkts, "Dump Rx packets");
-module_param(print_desc, bool, S_IRUGO);
+module_param(print_desc, bool, 0644);
 MODULE_PARM_DESC(print_desc, "Print Tx descriptors");
-module_param(metadata_on_crc, uint, S_IRUGO);
+module_param(metadata_on_crc, uint, 0644);
 MODULE_PARM_DESC(metadata_on_crc, "Test metadata on CRC");
-module_param(mss_for_tso, uint, S_IRUGO);
+module_param(mss_for_tso, uint, 0644);
 MODULE_PARM_DESC(mss_for_tso, "MSS value to test TSO");
 
 static ssize_t gbe_dbg_show(struct device *dev,
@@ -130,7 +130,7 @@ static ssize_t gbe_dbg_show(struct devic
    }
    return (buf - st);
 }
-
+#ifdef DWC_ETH_NETSS_PM /* TE - netip support is missing for that */
 static int gbe_handle_suspend_resume(void *args, netss_power_state_t state);
 
 static ssize_t gbe_suspend_store(struct device *dev,
@@ -144,7 +144,7 @@ static ssize_t gbe_suspend_store(struct
                                     NETSS_NETIP_POWER_STATE_ACTIVE);
    return count;
 }
-
+#endif
 #endif //GBE_DEBUG
 
 static int gbe_init_top_registers(void __iomem **gbe_base,
@@ -156,7 +156,7 @@ static int gbe_init_top_registers(void _
    CFG_PRINT("[GBE] Initializing General registers\n");
    if (!netss_driver_ready()) {
       printk(KERN_ALERT "[GBE] NetSS not ready!\n");
-   } else if (netss_device_get_info(NETSS_DEV_GBE, &gbe_mmio) != 0) {
+   } else if (netss_device_get_info(NETSS_DEV_GBE, &gbe_mmio)) {
       printk(KERN_ALERT "[GBE] Error getting GbE MMIO info!\n");
    } else {
       uint32_t reg_val, reg_cfg;
@@ -320,6 +320,7 @@ static void create_gbe_sysfs(struct DWC_
    if (device_create_file(&pdata->dev->dev, dev_attr)) {
       printk(KERN_ALERT "[GBE] Error creating debug sysfs attribute!\n");
    }
+#ifdef DWC_ETH_NETSS_PM /* TE - netip support is missing for that */
    dev_attr = &pdata->suspend_attr;
    sysfs_attr_init(&dev_attr->attr);
    dev_attr->show = NULL;
@@ -330,6 +331,7 @@ static void create_gbe_sysfs(struct DWC_
       printk(KERN_ALERT "[GBE] Error creating suspend sysfs attribute!\n");
    }
 #endif
+#endif
    dev_attr = &pdata->itr_lat_attr;
    sysfs_attr_init(&dev_attr->attr);
    dev_attr->show = gbe_itr_ips_show;
@@ -350,6 +352,7 @@ void gbe_core_version(struct DWC_ETH_QOS
       gbe_configure_IC(pdata->gbe_base);
 }
 
+#ifdef DWC_ETH_NETSS_PM /* TE - netip support is missing for that */
 static int gbe_handle_suspend_resume(void *args, netss_power_state_t state)
 {
    struct DWC_ETH_QOS_prv_data *pdata = (struct DWC_ETH_QOS_prv_data *)args;
@@ -361,6 +364,7 @@ static int gbe_handle_suspend_resume(voi
    }
    return ret;
 }
+#endif
 
 void DWC_ETH_QOS_init_all_fptrs(struct DWC_ETH_QOS_prv_data *pdata)
 {
@@ -400,7 +404,9 @@ int DWC_ETH_QOS_probe(struct pci_dev *pd
    uint8_t tx_q_count = 0, rx_q_count = 0;
    void __iomem *gbe_base;
    unsigned int gbe_mux_cfg;
+#ifdef DWC_ETH_NETSS_PM /* TE - netip support is missing for that */
    netss_power_state_callback_info_t pm_callback_info;
+#endif
 #ifdef GBE_DEBUG
    char dbg_str[]="_DEBUG";
 #else
@@ -477,7 +483,7 @@ int DWC_ETH_QOS_probe(struct pci_dev *pd
    dev->base_addr = dwc_eth_qos_pci_base_addr;
    SET_NETDEV_DEV(dev, &pdev->dev);
    pdata = netdev_priv(dev);
-	 pdata_p = pdata;
+   pdata_p = pdata;
    DWC_ETH_QOS_init_all_fptrs(pdata);
    hw_if = &(pdata->hw_if);
    desc_if = &(pdata->desc_if);
@@ -507,13 +513,13 @@ int DWC_ETH_QOS_probe(struct pci_dev *pd
 
    // Disable MDIO
    pdata->hw_feat.sma_sel = 0;
-   /* Override TSO with module parameter (if HW supports TSO) */
-   if (pdata->hw_feat.tso_en)
-      pdata->hw_feat.tso_en = tso_enable;
-   /* Notify of potential known issues with TSO in core v4.00 */
-   if (pdata->hw_feat.tso_en && pdata->version == MAC_VER_4_00 &&
-       num_of_queues > 1)
-      WRN_PRINT("TSO in v4.00 with more than one queue may fail!\n");
+	/* Override TSO with module parameter (if HW supports TSO) */
+	if (pdata->hw_feat.tso_en)
+		pdata->hw_feat.tso_en = tso_enable;
+	/* Notify of potential known issues with TSO in core v4.00 */
+	if (pdata->hw_feat.tso_en && pdata->version == MAC_VER_4_00 &&
+		num_of_queues > 1)
+		WRN_PRINT("TSO in v4.00 with more than one queue may fail!\n");
 
 #ifdef GBE_DEBUG
    // Force enable TSO if mss parameter was passed
@@ -615,6 +621,7 @@ int DWC_ETH_QOS_probe(struct pci_dev *pd
 
    create_gbe_sysfs(pdata);
 
+#ifdef DWC_ETH_NETSS_PM /* TE - netip support is missing for that */
    /* Register PM callback with NetSS driver */
    pm_callback_info.func = gbe_handle_suspend_resume;
    pm_callback_info.args = pdata;
@@ -624,7 +631,7 @@ int DWC_ETH_QOS_probe(struct pci_dev *pd
       // - Determine if it's ok to continue or return error code
       // - What if NetIP is in DSBY already?
    }
-
+#endif
    if (pdata->hw_feat.pcs_sel) {
       netif_carrier_off(dev);
       CFG_PRINT("Carrier off till LINK is up\n");
@@ -688,14 +695,17 @@ void DWC_ETH_QOS_remove(struct pci_dev *
    struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
    struct desc_if_struct *desc_if = &(pdata->desc_if);
    void __iomem *reg_base = pdata->gbe_base;
+#ifdef DWC_ETH_NETSS_PM /* TE - netip support is missing for that */
    netss_power_state_callback_info_t pm_callback_info;
-
+#endif
    DBGPR("--> DWC_ETH_QOS_remove\n");
 
+#ifdef DWC_ETH_NETSS_PM /* TE - netip support is missing for that */
    /* Deregister PM callback with NetSS driver */
    pm_callback_info.func = NULL;
    pm_callback_info.args = NULL;
    netss_power_state_change_callback_register(NETSS_DEV_GBE, &pm_callback_info);
+#endif
 
    if (pdata->irq_number != 0) {
       free_irq(pdata->irq_number, pdata);
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
@@ -115,7 +115,7 @@
 //#define GBE_POLLING
 
 /* Enable GBE debug logic */
-//#define GBE_DEBUG
+#define GBE_DEBUG
 
 #ifdef DWC_ETH_QOS_CONFIG_PTP
 #undef DWC_ETH_QOS_TXPOLLING_MODE_ENABLE
@@ -1243,8 +1243,8 @@ int DWC_ETH_QOS_mdio_read_direct(struct
 				 int phyaddr, int phyreg, int *phydata);
 int DWC_ETH_QOS_mdio_write_direct(struct DWC_ETH_QOS_prv_data *pdata,
 				  int phyaddr, int phyreg, int phydata);
-INT DWC_ETH_QOS_mdio_read_ext(int regaddr, int *phydata);
-INT DWC_ETH_QOS_mdio_write_ext(int regaddr, int phydata);
+int DWC_ETH_QOS_mdio_read_ext(int regaddr, int *phydata);
+int DWC_ETH_QOS_mdio_write_ext(int regaddr, int phydata);
 void dbgpr_regs(void);
 void dump_phy_registers(struct DWC_ETH_QOS_prv_data *);
 void dump_tx_desc(struct DWC_ETH_QOS_prv_data *pdata, int first_desc_idx,
--- a/drivers/net/ethernet/synopsys/Kconfig
+++ b/drivers/net/ethernet/synopsys/Kconfig
@@ -1,8 +1,7 @@
 config DWC_QOS
 	tristate "Synopsys Ethernet QOS driver"
-	depends on X86_PUMA7
-	depends on PCI
 	default y
+	depends on ARCH_GEN3 && PCI
 	---help---
 	  This driver supports Synopsys QOS GMAC core controller.
 	  To compile this driver as a module, choose M here: the
