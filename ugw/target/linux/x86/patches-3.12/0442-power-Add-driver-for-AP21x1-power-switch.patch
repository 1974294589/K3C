From c17c5757e1cd94128e6d942224764578fbef780e Mon Sep 17 00:00:00 2001
From: Andrei Danaila <andrei.danaila@intel.com>
Date: Wed, 13 Apr 2016 14:12:09 -0700
Subject: [PATCH 1/2] power: Add driver for AP21x1 power switch

Add driver for the AP21x1 family of power switches.

The driver controls the output to the switch according to the
switch overcurrent and thermal feedback.

Signed-off-by: Andrei Danaila <andrei.danaila@intel.com>
---
 drivers/power/Kconfig               |    5 ++
 drivers/power/Makefile              |    1 +
 drivers/power/ap21x1_switch.c       |  124 +++++++++++++++++++++++++++++++++++
 include/linux/power/ap21x1_switch.h |   26 ++++++++
 4 files changed, 156 insertions(+)
 create mode 100644 drivers/power/ap21x1_switch.c
 create mode 100644 include/linux/power/ap21x1_switch.h

--- a/drivers/power/Kconfig
+++ b/drivers/power/Kconfig
@@ -367,6 +367,11 @@ config AB8500_BM
 	help
 	  Say Y to include support for AB8500 battery management.
 
+config SWITCH_AP21X1
+	bool "AP21X1 Power Switch Management Driver"
+	help
+	  Say Y to include support for the AP21X1 power switch.
+
 config BATTERY_GOLDFISH
 	tristate "Goldfish battery driver"
 	depends on GOLDFISH || COMPILE_TEST
--- a/drivers/power/Makefile
+++ b/drivers/power/Makefile
@@ -52,6 +52,7 @@ obj-$(CONFIG_CHARGER_MAX8997)	+= max8997
 obj-$(CONFIG_CHARGER_MAX8998)	+= max8998_charger.o
 obj-$(CONFIG_CHARGER_BQ2415X)	+= bq2415x_charger.o
 obj-$(CONFIG_CHARGER_BQ24190)	+= bq24190_charger.o
+obj-$(CONFIG_SWITCH_AP21X1)	+= ap21x1_switch.o
 obj-$(CONFIG_POWER_AVS)		+= avs/
 obj-$(CONFIG_CHARGER_SMB347)	+= smb347-charger.o
 obj-$(CONFIG_CHARGER_TPS65090)	+= tps65090-charger.o
--- /dev/null
+++ b/drivers/power/ap21x1_switch.c
@@ -0,0 +1,124 @@
+/*
+ * ap21x1_switch.c - AP21X1 Power Switch driver
+ * Copyright (c) 2016 Intel Corporation. All Rights Reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ */
+
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/module.h>
+#include <linux/interrupt.h>
+#include <linux/power/ap21x1_switch.h>
+
+irqreturn_t ap21x1_oc_handler (int irq, struct ap21x1_data *pdata)
+{
+	if (gpio_get_value(pdata->gpio_oc) == pdata->gpio_oc_assert_value)
+		gpio_set_value(pdata->gpio_vin,
+				!pdata->gpio_vin_assert_value);
+	else
+		gpio_set_value(pdata->gpio_vin,
+				 pdata->gpio_vin_assert_value);
+	return IRQ_HANDLED;
+}
+
+static int ap21x1_probe(struct platform_device *pdev)
+{
+	struct ap21x1_data *pdata = dev_get_platdata(&pdev->dev);
+	int r = 0;
+
+	if (!pdata || !gpio_is_valid(pdata->gpio_vin)
+		   || !gpio_is_valid(pdata->gpio_oc))
+		return -EINVAL;
+
+	r = gpio_request(pdata->gpio_vin, "AP21x1_VIN_GPIO");
+	if (r) {
+		dev_dbg(&pdev->dev, "Failed to get VIN GPIO ret %d\n", r);
+		return r;
+	}
+
+	pdata->gpio_oc_irq = __gpio_to_irq(pdata->gpio_oc);
+	if (IS_ERR(pdata->gpio_oc_irq)) {
+		r = pdata->gpio_oc_irq;
+		goto error_oc_reg;
+	}
+
+	r = gpio_request(pdata->gpio_oc, "AP21x1_OC_GPIO");
+	if (r) {
+		dev_dbg(&pdev->dev, "Failed to get OC GPIO ret %d\n", r);
+		goto error_oc_reg;
+	}
+
+	r = gpio_direction_input(pdata->gpio_oc);
+	if (r) {
+		dev_dbg(&pdev->dev, "Failed to set OC GPIO as input %d\n", r);
+		goto error_gpio_dir;
+	}
+
+	r = request_irq(pdata->gpio_oc_irq, (irq_handler_t)ap21x1_oc_handler,
+		   IRQF_TRIGGER_FALLING | IRQF_TRIGGER_RISING,
+		   "AP21X1 OC interrupt", pdata);
+	if (r) {
+		dev_dbg(&pdev->dev,
+			  "Failed to register OC interrupt ret %d\n", r);
+		/* Last ditch effort; Gate Vin as we cannot operate safely */
+		gpio_direction_output(pdata->gpio_vin,
+				     !pdata->gpio_vin_assert_value);
+		goto error_vin_assert;
+	} else {
+		r = gpio_direction_output(pdata->gpio_vin,
+					  pdata->gpio_vin_assert_value);
+		if (r) {
+			dev_dbg(&pdev->dev,
+				"Failed to assert Vin GPIO ret %d\n", r);
+			goto error_vin_assert;
+		}
+	}
+
+	return 0;
+
+error_vin_assert:
+	disable_irq(pdata->gpio_oc_irq);
+	free_irq(pdata->gpio_oc_irq, &pdev->dev);
+error_gpio_dir:
+	gpio_free(pdata->gpio_oc);
+error_oc_reg:
+	gpio_free(pdata->gpio_vin);
+	return r;
+}
+static int ap21x1_remove(struct platform_device *pdev)
+{
+	struct ap21x1_data *pdata = dev_get_platdata(&pdev->dev);
+
+	disable_irq(pdata->gpio_oc_irq);
+	free_irq(pdata->gpio_oc_irq, &pdev->dev);
+	/* Gate Vin as we cannot operate safely */
+	gpio_direction_output(pdata->gpio_vin,
+			     !pdata->gpio_vin_assert_value);
+	gpio_free(pdata->gpio_vin);
+	gpio_free(pdata->gpio_oc);
+
+	return 0;
+}
+
+static struct platform_driver ap21x1_driver = {
+	.driver = {
+		.name  = "ap21x1",
+		.owner = THIS_MODULE,
+	},
+	.probe		= ap21x1_probe,
+	.remove		= ap21x1_remove,
+};
+
+module_platform_driver(ap21x1_driver);
+
+MODULE_DESCRIPTION("AP21x1 Power Switch Driver");
+MODULE_AUTHOR("Andrei Danaila");
+MODULE_LICENSE("GPL");
--- /dev/null
+++ b/include/linux/power/ap21x1_switch.h
@@ -0,0 +1,26 @@
+/*
+ * ap21x1_switch.h: Main header for ap21x1 switch driver
+ * Copyright (c) 2016 Intel Corporation. All Rights Reserved
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ */
+
+#ifndef __LINUX_POWER_AP21x1_SWITCH_H__
+#define __LINUX_POWER_AP21x1_SWITCH_H__
+
+struct ap21x1_data {
+	int gpio_vin;
+	int gpio_vin_assert_value;
+	int gpio_oc;
+	int gpio_oc_assert_value;
+	int gpio_oc_irq;
+};
+
+#endif
