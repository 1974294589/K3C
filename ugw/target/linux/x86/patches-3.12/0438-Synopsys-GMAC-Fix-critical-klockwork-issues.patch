From c1aa9082916de59398295a95871b952934834038 Mon Sep 17 00:00:00 2001
From: "Vital Yep, Marco A" <marco.a.vital.yep@intel.com>
Date: Tue, 28 Jun 2016 08:28:27 -0700
Subject: [PATCH 438/441] Synopsys GMAC: Fix critical klockwork issues

Fixes to critical klockwork issues.

Signed-off-by: Vital Yep, Marco A <marco.a.vital.yep@intel.com>
---
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c |  8 +++-----
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c  |  4 ++--
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c  | 14 ++++++++++++--
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c |  2 +-
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c  | 16 ++++++++--------
 5 files changed, 26 insertions(+), 18 deletions(-)

--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c
@@ -367,8 +367,8 @@ static void DWC_ETH_QOS_wrapper_rx_descr
 	desc_data->skb_realloc_idx = 0;
 	desc_data->skb_realloc_threshold = MIN_RX_DESC_CNT;
 	desc_data->pkt_received = 0;
-	desc_data->cur_rx = 0;
 	hw_if->rx_desc_init(pdata, qInx);
+	desc_data->cur_rx = 0;
 
 	DBGPR("<--DWC_ETH_QOS_wrapper_rx_descriptor_init_single_q\n");
 }
@@ -841,7 +841,6 @@ static int DWC_ETH_QOS_map_page_buffs(st
  * \retval count â€“ number of packet to be programmed in the descriptor or
  * zero on failure.
  */
-
 static unsigned int DWC_ETH_QOS_map_skb(struct net_device *dev,
 					struct sk_buff *skb)
 {
@@ -1000,6 +999,7 @@ err_out_dma_map_fail:
 *
 * \return void
 */
+
 static void DWC_ETH_QOS_unmap_tx_skb(struct DWC_ETH_QOS_prv_data *pdata,
 				     struct DWC_ETH_QOS_tx_buffer *buffer)
 {
@@ -1029,7 +1029,6 @@ static void DWC_ETH_QOS_unmap_tx_skb(str
 		buffer->len2 = 0;
 	}
 
-
 	if (buffer->skb != NULL) {
 		dev_kfree_skb_any(buffer->skb);
 		buffer->skb = NULL;
@@ -1047,13 +1046,12 @@ static void DWC_ETH_QOS_unmap_tx_skb(str
  *
  * \return void
  */
-
 static void DWC_ETH_QOS_unmap_rx_skb(struct DWC_ETH_QOS_prv_data *pdata,
 				     struct DWC_ETH_QOS_rx_buffer *buffer)
 {
 	DBGPR("-->DWC_ETH_QOS_unmap_rx_skb\n");
 
-	/* unmap the first buffer */
+	/* Unmap the first buffer */
 	if (buffer->dma) {
 		if (pdata->rx_split_hdr) {
 			dma_unmap_single(&pdata->pdev->dev, buffer->dma,
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
@@ -1628,7 +1628,7 @@ static int enable_rx_flow_ctrl(void)
 static int stop_dma_rx(uint32_t qInx)
 {
    int retryCount = 10;
-   volatile uint32_t ch_state;
+   uint32_t ch_state = 0;
    int ret = Y_SUCCESS;
 
    /* issue Rx dma stop command */
@@ -1699,7 +1699,7 @@ static int start_dma_rx(uint32_t qInx)
 static int stop_dma_tx(uint32_t qInx)
 {
    int retryCount = 10;
-   volatile uint32_t ch_state;
+   uint32_t ch_state = 0;
    int ret = Y_SUCCESS;
 
    /* issue Tx dma stop command */
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
@@ -520,7 +520,8 @@ irqreturn_t DWC_ETH_QOS_ISR(int irq, voi
    if (pdata->version == MAC_VER_4_00) {
       // Read and clear interrupt in Atom Interrupt Controller
       atom_ims = GBE_REG_RD(GBE_ATOM_IMS); //Interrupts are cleared when IMS is read
-      if (!VAR32_GET_BIT(atom_ims, GBE_ATOM_INTC))
+      if (!VAR32_GET_BIT(atom_ims, GBE_ATOM_INTC) &&
+          !(pdata->power_state & DWC_ETH_QOS_NETIP_PWRDWN))
          printk(KERN_ALERT "GMAC5 interrupt with bit not set on IC!\n");
    }
 
@@ -2732,6 +2733,8 @@ static int DWC_ETH_QOS_clean_split_hdr_r
             } else {
                /* this is the middle of a chain */
                payload_len = pdata->rx_buffer_len;
+               /* skb_top must not be NULL for a middle descriptor */
+               BUG_ON(desc_data->skb_top == NULL);
                skb_fill_page_desc(desc_data->skb_top,
                   skb_shinfo(desc_data->skb_top)->nr_frags,
                   buffer->page2, 0,
@@ -2758,6 +2761,8 @@ static int DWC_ETH_QOS_clean_split_hdr_r
                      buffer->rx_hdr_size);
                }
 
+               /* skb_top must not be NULL for the last descriptor */
+               BUG_ON(desc_data->skb_top == NULL);
                skb_fill_page_desc(desc_data->skb_top,
                   skb_shinfo(desc_data->skb_top)->nr_frags,
                   buffer->page2, 0,
@@ -2975,18 +2980,21 @@ static int DWC_ETH_QOS_clean_jumbo_rx_ir
                   pdata->rx_buffer_len);
 
                DBGPR("RX: pkt in second buffer pointer\n");
+               /* skb_top must not be NULL for the first descriptor */
+               BUG_ON(desc_data->skb_top == NULL);
                skb_fill_page_desc(
                   desc_data->skb_top,
                   skb_shinfo(desc_data->skb_top)->nr_frags,
                   buffer->page2, 0,
                   pdata->rx_buffer_len);
             } else {
+               /* skb_top must not be NULL for a middle descriptor */
+               BUG_ON(desc_data->skb_top == NULL);
                /* this is the middle of a chain */
                skb_fill_page_desc(desc_data->skb_top,
                   skb_shinfo(desc_data->skb_top)->nr_frags,
                   buffer->page, 0,
                   pdata->rx_buffer_len);
-
                DBGPR("RX: pkt in second buffer pointer\n");
                skb_fill_page_desc(desc_data->skb_top,
                   skb_shinfo(desc_data->skb_top)->nr_frags,
@@ -3005,6 +3013,8 @@ static int DWC_ETH_QOS_clean_jumbo_rx_ir
                /* end of the chain */
                pkt_len =
                   (pkt_len - (pdata->rx_buffer_len * intermediate_desc_cnt));
+               /* skb_top must not be NULL for the last descriptor */
+               BUG_ON(desc_data->skb_top == NULL);
                if (pkt_len > pdata->rx_buffer_len) {
                   skb_fill_page_desc(desc_data->skb_top,
                      skb_shinfo(desc_data->skb_top)->nr_frags,
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c
@@ -134,7 +134,7 @@ static int DWC_ETH_QOS_mdio_read(struct
 	struct net_device *dev = bus->priv;
 	struct DWC_ETH_QOS_prv_data *pdata = netdev_priv(dev);
 	hw_interface_t *hw_if = &(pdata->hw_if);
-	int phydata;
+	int phydata = 0;
 
 	DBGPR_MDIO("--> DWC_ETH_QOS_mdio_read: phyaddr = %d, phyreg = %d\n",
 	      phyaddr, phyreg);
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
@@ -156,7 +156,7 @@ static int gbe_init_top_registers(void _
    CFG_PRINT("[GBE] Initializing General registers\n");
    if (!netss_driver_ready()) {
       printk(KERN_ALERT "[GBE] NetSS not ready!\n");
-   } else if (netss_device_get_info(NETSS_DEV_GBE, &gbe_mmio)) {
+   } else if (netss_device_get_info(NETSS_DEV_GBE, &gbe_mmio) != 0) {
       printk(KERN_ALERT "[GBE] Error getting GbE MMIO info!\n");
    } else {
       uint32_t reg_val, reg_cfg;
@@ -505,13 +505,13 @@ int DWC_ETH_QOS_probe(struct pci_dev *pd
 
    // Disable MDIO
    pdata->hw_feat.sma_sel = 0;
-	/* Override TSO with module parameter (if HW supports TSO) */
-	if (pdata->hw_feat.tso_en)
-		pdata->hw_feat.tso_en = tso_enable;
-	/* Notify of potential known issues with TSO in core v4.00 */
-	if (pdata->hw_feat.tso_en && pdata->version == MAC_VER_4_00 &&
-		num_of_queues > 1)
-		WRN_PRINT("TSO in v4.00 with more than one queue may fail!\n");
+   /* Override TSO with module parameter (if HW supports TSO) */
+   if (pdata->hw_feat.tso_en)
+      pdata->hw_feat.tso_en = tso_enable;
+   /* Notify of potential known issues with TSO in core v4.00 */
+   if (pdata->hw_feat.tso_en && pdata->version == MAC_VER_4_00 &&
+       num_of_queues > 1)
+      WRN_PRINT("TSO in v4.00 with more than one queue may fail!\n");
 
 #ifdef GBE_DEBUG
    // Force enable TSO if mss parameter was passed
