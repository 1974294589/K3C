#!/bin/sh
# Configure AccessPoint.X_LANTIQ_COM_Vendor.HS20 parameters
# Needed object: AccessPoint.X_LANTIQ_COM_Vendor.HS20

script_name="$0"

[ ! "$LIB_COMMON_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_common.sh
[ ! "$LIB_CONVERT_SOURCED" ] && . /tmp/fapi_wlan_wave_lib_convert.sh
[ ! "$IN_CONF_SOURCED" ] && in_conf_source

interface_name=$1
pid=$$

# Find the interface index and the radio index
interface_index=`find_index_from_interface_name $interface_name`
radio_name=${interface_name%%.*}
radio_index=`find_index_from_interface_name $radio_name`

print2log $radio_index $radio_index DEBUG "$script_name $*"
timestamp $radio_index "$script_name:begin"

# mv temporary conf files:
#cp ${HS20_CONF}  ${CONF_DIR}/_fapi_wlan_wave_hs20_conf
#rm ${CONF_DIR}/fapi_wlan_wave_hs20_*
#mv ${CONF_DIR}/_fapi_wlan_wave_hs20_conf ${HS20_CONF}
hs_conf_files=`ls ${CONF_DIR}/fapi_wlan_wave_hs20_* 2>/dev/null`
for file in $hs_conf_files
do
	orig_file=${CONF_DIR}/$file
	cp $orig_file ${CONF_DIR}/${file}_old
	lock_and_copy_conf_file $orig_file $file $orig_file
done

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the in conf file
[ "$debug_save_conf" ] && cp ${IN_CONF} ${CONF_DIR}/hotspot_set_in_conf

[ -e ${HS20_COMMANDS_SAVE}_$interface_name ] && rm ${HS20_COMMANDS_SAVE}_$interface_name

add_replace_command()
{
	command=$*
	# TODO: smart add to file...
	echo "add_replace_command: add $command" > /dev/console
	echo $command >> ${HS20_COMMANDS_SAVE}_$interface_name
}

#echo "fapi_wlan_wave_hotspot_set: dump IN_CONF:" > /dev/console
#cat ${IN_CONF} > /dev/console

###########################################################
# Map the objects indexes to the received objects in the in.conf file
# RoamingConsortium - 2 exists
# ConnectionCapability and L2Firewall - may be missing
#
# IN_CONF: From tests we have on Init:
# Object_0=Device.WiFi.AccessPoint.X_LANTIQ_COM_Vendor.HS20
# Object_1=Device.WiFi.AccessPoint.X_LANTIQ_COM_Vendor.HS20.OperatorFriendlyName
# Object_2=Device.WiFi.AccessPoint.X_LANTIQ_COM_Vendor.HS20.VenueName
# Object_3=Device.WiFi.AccessPoint.X_LANTIQ_COM_Vendor.HS20.RoamingConsortium
# Object_4=Device.WiFi.AccessPoint.X_LANTIQ_COM_Vendor.HS20.RoamingConsortium
# Object_5=Device.WiFi.AccessPoint.X_LANTIQ_COM_Vendor.HS20.NAIrealm
# Object_6=Device.WiFi.AccessPoint.X_LANTIQ_COM_Vendor.HS20.OSUicons
# Object_7=Device.WiFi.AccessPoint.X_LANTIQ_COM_Vendor.HS20.OSUproviders

###########################################################
# Save the input configuration parameters to a local DB used by Wave FAPI
# Note - the conf file is not used to detect change, on every HS2.0 change, the complete object pass by upper layer
# For sub-objects, the sub-instance files are created, each per sub-object and are overwrite on every change (also between interfaces)
#
echo "fapi_wlan_wave_hotspot_set: Save the input configuration parameters to a local DB" > /dev/console

echo "fapi_wlan_wave_hotspot_set: call map_param_index for $ACCESSPOINT_HS20_VENDOR_OBJECT" > /dev/console
hs20_index=`map_param_index Object $ACCESSPOINT_HS20_VENDOR_OBJECT`
echo "fapi_wlan_wave_hotspot_set: hs20_index=$hs20_index" > /dev/console

updateHessid=0

# Main object:
[ -n "$hs20_index" ] && save_db_params hotspot_set $interface_name $hs20_index $interface_index

echo "fapi_wlan_wave_hotspot_set: Source HS20 DBs" > /dev/console

# Source HS20 DBs
local_db_source ACCESSPOINT
local_db_source HS20

comment="___Hotspot_parameters___###"

#####################################################################
# Sub objects:
# Create conf files for HS2.0 sub-objects only if instance exist

OpFriendNameNumOfEntries=`db2fapi_convert regular OperatorFriendlyNameNumberOfEntries $interface_index`
[ -n "$OpFriendNameNumOfEntries" ] && create_sub_instance_in_files $interface_name $OpFriendNameNumOfEntries OperatorFriendlyName hotspot_set_opfriend_name
VenueNameNumOfEntries=`db2fapi_convert regular VenueNameNumberOfEntries $interface_index`
[ -n "$VenueNameNumOfEntries" ] && create_sub_instance_in_files $interface_name $VenueNameNumOfEntries VenueName hotspot_set_venue_name
ConnectCapabNumOfEntries=`db2fapi_convert regular ConnectionCapabilityNumberOfEntries $interface_index`
[ -n "$ConnectCapabNumOfEntries" ] && create_sub_instance_in_files $interface_name $ConnectCapabNumOfEntries ConnectionCapability hotspot_set_connect_capab
RoamingNumOfEntries=`db2fapi_convert regular RoamingConsortiumNumberOfEntries $interface_index`
[ -n "$RoamingNumOfEntries" ] && create_sub_instance_in_files $interface_name $RoamingNumOfEntries RoamingConsortium hotspot_set_roam
NAIrealmNumOfEntries=`db2fapi_convert regular NAIrealmNumberOfEntries $interface_index`
[ -n "$NAIrealmNumOfEntries" ] && create_sub_instance_in_files $interface_name $NAIrealmNumOfEntries NAIrealm hotspot_set_nairealm
#WanMetricsNumOfEntries=`db2fapi_convert regular WanMetricsNumberOfEntries $interface_index`
#[ -n "$WanMetricsNumOfEntries" ] && create_sub_instance_in_files $interface_name $WanMetricsNumOfEntries WanMetrics hotspot_wan_metrics
OSUiconsNumOfEntries=`db2fapi_convert regular OSUiconsNumberOfEntries $interface_index`
[ -n "$OSUiconsNumOfEntries" ] && create_sub_instance_in_files $interface_name $OSUiconsNumOfEntries OSUicons hotspot_osu_icons
OSUprovidNumOfEntries=`db2fapi_convert regular OSUprovidersNumberOfEntries $interface_index`
[ -n "$OSUprovidNumOfEntries" ] && create_sub_instance_in_files $interface_name $OSUprovidNumOfEntries OSUproviders hotspot_osu_provide
L2FirewallNumOfEntries=`db2fapi_convert regular L2FirewallNumberOfEntries $interface_index`
[ -n "$L2FirewallNumOfEntries" ] && create_sub_instance_in_files $interface_name $L2FirewallNumOfEntries L2Firewall hotspot_l2ffw
######################################################################

# Define list of AccessPoint Vendor HS20 parameters
hostapd_params="hs20
disable_dgaf
anqp_domain_id
hs20_operating_class
osu_ssid
gas_comeback_delay
access_network_type
internet
venue_group
venue_type
hessid
network_auth_type
ipaddr_type_availability
domain_name
anqp_3gpp_cell_net
hs20_wan_metrics
hs20_oper_friendly_name
venue_name
hs20_conn_capab
roaming_consortium
nai_realm
hs20_icon
osu_server_uri
osu_friendly_name
osu_nai
osu_method_list
osu_icon
osu_service_desc"

hostapd_hardcoded_params="hs20_deauth_req_timeout
manage_p2p
allow_cross_connection
tdls_prohibit
interworking"

echo "fapi_wlan_wave_hotspot_set: Create the output configuration file" > /dev/console
# Create the output configuration file
cat /dev/null > ${OUT_CONF}

# Prepare the temporary configuration files to use
prepare_confs $interface_name $radio_name $pid $VAP
# Get the pid to use in this configuration session
. ${CONF_IN_PROGRESS}_${radio_name}

echo "fapi_wlan_wave_hotspot_set: Read current values and initiate new values file" > /dev/console
# Read current values and initiate new values file.
hostapd_vap_current_values=${CONF_DIR}/hostapd_vap_current_values_${interface_name}_${pid}
echo "fapi_wlan_wave_hotspot_set: hostapd_vap_current_values=$hostapd_vap_current_values" > /dev/console

read_current_values $HOSTAPD_VAP_CONF_PREFIX $interface_name $hostapd_vap_current_values

		
echo "fapi_wlan_wave_hotspot_set: Check if hotspot is enabled and update the conf file with value" > /dev/console
################################################################
# Check if hotspot is enabled and update the conf file with value
#
hs20_enable=`db2fapi_convert boolean Enable $interface_index`
osen_enable=`db2fapi_convert boolean OSENEnabled $interface_index`
hs20_mode=$HS20_MODE_DISABLED
echo "fapi_wlan_wave_hotspot_set: hs20_enable=$hs20_enable" > /dev/console
echo "fapi_wlan_wave_hotspot_set: osen_enable=$osen_enable" > /dev/console

if [ "$hs20_enable" = "1" ]
then
	if [ "$osen_enable" = "0" ]
	then
		hs20_mode=$HS20_MODE_ENABLED
	else
		hs20_mode=$HS20_MODE_OSEN
	fi
fi

echo "fapi_wlan_wave_hotspot_set: set_conf_param hostapd_vap with hs20=$hs20_mode" > /dev/console
[ -n "$hs20_mode" ] && set_conf_param hostapd_vap regular no_otf $pid $interface_name "hs20" "$hs20_mode"


echo "fapi_wlan_wave_hotspot_set: Calculate new values only if hotspot is enabled" > /dev/console
####################################################################################
# Calculate new values only if hotspot is enabled.
# Try to read the values of all the parameters from the fapi_wlan_wave_in.conf file.
# Parameters that are not in the fapi_wlan_wave_in.conf file will be empty and won't be set.
#
osen=""
disable_dgaf=""
anqp_domain_id=""
hs20_operating_class=""
osu_ssid=""
gas_comeback_delay=""
access_network_type=""
internet=""
venue_group=""
venue_type=""
hessid=""
network_auth_type=""
ipaddr_type_availability=""
domain_name=""
anqp_3gpp_cell_net=""
hs20_wan_metrics=""

db2fapi_convert_conn_capab()
{
	interface_index=$1
	Protocol=`db2fapi_convert regular Protocol $interface_index`
	Port=`db2fapi_convert regular Port $interface_index`
	Status=`db2fapi_convert regular Status $interface_index`
	
	echo "$Protocol:$Port:$Status" > /dev/console
	echo "$Protocol:$Port:$Status"
}

db2fapi_convert_osu_icons()
{
	# <Icon Width>:<Icon Height>:<Language code>:<Icon Type>:<Name>:<file path>
	interface_index=$1
	
	Width=`db2fapi_convert regular Width $interface_index`
	Height=`db2fapi_convert regular Height $interface_index`
	LanguageCode=`db2fapi_convert regular LanguageCode $interface_index`
	Type=`db2fapi_convert regular Type $interface_index`
	Name=`db2fapi_convert regular Name $interface_index`
	FilePath=`db2fapi_convert regular FilePath $interface_index`
	
	echo "$Width:$Height:$LanguageCode:$Type:$Name:$FilePath" > /dev/console
	echo "$Width:$Height:$LanguageCode:$Type:$Name:$FilePath"
}


# If hotspot state changed to enabled, set all hardcoded parameters and parameters from in conf file
if [ -n "$hs20_mode" ] && [ $hs20_mode -gt $HS20_MODE_DISABLED ]
then
	##################################################################
	# Hotspot state changed
	##################################################################
	echo "fapi_wlan_wave_hotspot_set: Get all values:" > /dev/console
	# Get all values:
	#osen=`db2fapi_convert type DbParam $interface_index` # In security set script...
	disable_dgaf=`db2fapi_convert boolean DgafDisabled $interface_index`
	anqp_domain_id=`db2fapi_convert regular AnqpDomainId $interface_index`
	hs20_operating_class=`db2fapi_convert regular OperatingClass $interface_index`
	#osu_ssid=`db2fapi_convert regular OsuSsid $interface_index`
	osu_ssid=`db2fapi_convert_osu_ssid $interface_index`
	gas_comeback_delay=`db2fapi_convert regular GasComebackDelay $interface_index`
	if [ -z "$gas_comeback_delay" ] || [ "$gas_comeback_delay" = "0" ]
	then
		gas_comeback_delay=""
	fi
	access_network_type=`db2fapi_convert regular AccessNetworkType $interface_index`
	internet=`db2fapi_convert boolean InternetConnectivityEnabled $interface_index`
	venue_group=`db2fapi_convert regular VenueGroup $interface_index`
	venue_type=`db2fapi_convert regular VenueType $interface_index`
	hessid=`db2fapi_convert regular HESSID $interface_index`
	if [ -z "$hessid" ];then
		# if empty set with bssid, update dB
		updateHessid=1
		vap_mac=`ifconfig ${interface_name}`
		vap_mac=${vap_mac##*HWaddr }
		hessid=${vap_mac%% *}		
	fi
	network_auth_type=`db2fapi_convert regular NetworkAuthenticationType $interface_index`
	
	ipaddr_type_availability=`db2fapi_convert_ipaddr`
	
	domain_name=`db2fapi_convert regular DomainName $interface_index`
	anqp_3gpp_cell_net=`db2fapi_convert regular ThreeGpp $interface_index`
	# WMD:
	hs20_wan_metrics_duration=`db2fapi_convert regular WanMetricsDuration $interface_index` # parameter=duration in notifications
	hs20_wan_metrics_port=`db2fapi_convert regular WanPort $interface_index` # parameter=connname in notifications
	# TODO: interface_name -> parameter=ref_name in notifications
	hs20_wan_metrics_linkstatus=`db2fapi_convert regular WanMetricsLinkStatus $interface_index`
	hs20_wan_metrics_symmetriclink=`db2fapi_convert boolean WanMetricsSymmetricLink $interface_index`
	hs20_wan_metrics_atcapacity=`db2fapi_convert boolean WanMetricsAtCapacity $interface_index`
	hs20_wan_metrics_dlspeed=`db2fapi_convert regular WanMetricsDlSpeed $interface_index`
	hs20_wan_metrics_ulspeed=`db2fapi_convert regular WanMetricsUlSpeed $interface_index`
	hs20_wan_metrics_dlload=`db2fapi_convert regular WanMetricsDlLoad $interface_index`
	hs20_wan_metrics_ulload=`db2fapi_convert regular WanMetricsUlLoad $interface_index`
	hs20_wan_metrics_loadmeasurementduration=`db2fapi_convert regular WanMetricsLoadMeasurementDuration $interface_index`
	####################################################################################
	# WMD:
	# Stage-1: We will use hard coded params for
	# 	format: <WAN Info>:<DL Speed>:<UL Speed>:<DL Load>:<UL Load>:<LMD>
	# 	hs20_wan_metrics=01:8000:1000:80:240:3000
	# Stage-2: Implement the notifications and use real data.

	# WAN Info: B0-b1: hs20_wan_metrics_linkstatus, B2: hs20_wan_metrics_symmetriclink, B3: hs20_wan_metrics_atcapacity
	# 	hs20_wan_metrics_linkstatus: Link up -> 1, Link Down -> 2, Link in Test -> 3
	case "$hs20_wan_metrics_linkstatus" in
		"1") if [ "$hs20_wan_metrics_symmetriclink" = "0" ] && [ "$hs20_wan_metrics_atcapacity" = "0" ]
		then
			value="01"
		elif [ "$hs20_wan_metrics_symmetriclink" = "1" ] && [ "$hs20_wan_metrics_atcapacity" = "1" ]
		then
			value="1101"
		elif [ "$hs20_wan_metrics_symmetriclink" = "0" ] && [ "$hs20_wan_metrics_atcapacity" = "1" ]
		then
			value="1001"
		else
			value="101"
		fi
		;;
		"2") if [ "$hs20_wan_metrics_symmetriclink" = "0" ] && [ "$hs20_wan_metrics_atcapacity" = "0" ]
		then
			value="10"
		elif [ "$hs20_wan_metrics_symmetriclink" = "1" ] && [ "$hs20_wan_metrics_atcapacity" = "1" ]
		then
			value="1110"
		elif [ "$hs20_wan_metrics_symmetriclink" = "0" ] && [ "$hs20_wan_metrics_atcapacity" = "1" ]
		then
			value="1010"
		else
			value="110"
		fi
		;;
		"3") if [ "$hs20_wan_metrics_symmetriclink" = "0" ] && [ "$hs20_wan_metrics_atcapacity" = "0" ]
		then
			value="11"
		elif [ "$hs20_wan_metrics_symmetriclink" = "1" ] && [ "$hs20_wan_metrics_atcapacity" = "1" ]
		then
			value="1111"
		elif [ "$hs20_wan_metrics_symmetriclink" = "0" ] && [ "$hs20_wan_metrics_atcapacity" = "1" ]
		then
			value="1011"
		else
			value="111"
		fi
		;;
	esac
	hs20_wan_metrics="${value}:$hs20_wan_metrics_dlspeed:$hs20_wan_metrics_ulspeed:$hs20_wan_metrics_dlload:$hs20_wan_metrics_ulload:$hs20_wan_metrics_loadmeasurementduration"
	echo "hs20_wan_metrics=$hs20_wan_metrics" > /dev/console
	

	# Hard coded params:
	hs20_deauth_req_timeout=60
	manage_p2p=1
	allow_cross_connection=0
	tdls_prohibit=1
	interworking=1

	#########################################################################
	# DEBUG:
	echo "fapi_wlan_wave_hotspot_set: disable_dgaf=$disable_dgaf" > /dev/console
	echo "fapi_wlan_wave_hotspot_set: anqp_domain_id=$anqp_domain_id" > /dev/console
	echo "fapi_wlan_wave_hotspot_set: hs20_operating_class=$hs20_operating_class" > /dev/console
	echo "fapi_wlan_wave_hotspot_set: osu_ssid=$osu_ssid" > /dev/console
	echo "fapi_wlan_wave_hotspot_set: gas_comeback_delay=$gas_comeback_delay" > /dev/console
	echo "fapi_wlan_wave_hotspot_set: access_network_type=$access_network_type" > /dev/console
	echo "fapi_wlan_wave_hotspot_set: internet=$internet" > /dev/console
	echo "fapi_wlan_wave_hotspot_set: venue_group=$venue_group" > /dev/console
	echo "fapi_wlan_wave_hotspot_set: venue_type=$venue_type" > /dev/console
	echo "fapi_wlan_wave_hotspot_set: hessid=$hessid" > /dev/console
	echo "fapi_wlan_wave_hotspot_set: network_auth_type=$network_auth_type" > /dev/console
	echo "fapi_wlan_wave_hotspot_set: ipaddr_type_availability=$ipaddr_type_availability" > /dev/console
	echo "fapi_wlan_wave_hotspot_set: domain_name=$domain_name" > /dev/console
	echo "fapi_wlan_wave_hotspot_set: anqp_3gpp_cell_net=$anqp_3gpp_cell_net" > /dev/console
	##########################################################################

	##########################################################################
	# hostapd config:
	##########################################################################
	echo "fapi_wlan_wave_hotspot_set: Check if a hostapd parameter was changed" > /dev/console
	# Check if a hostapd parameter was changed.
	hostapd_changed=`check_param_changed "$hostapd_params"`

	# If a hostapd vap parameter was changed, remove parameters from hostapd_vap temp conf file and write all of them with updated values.
	#if [ "$hostapd_changed" ]
	#then
		echo "fapi_wlan_wave_hotspot_set: Check if a hostapd parameter was changed" > /dev/console
		hostapd_vap_conf_name=${CONF_DIR}/hostapd_vap_${interface_name}_${pid}.conf
		remove_params_from_conf "###$comment $hostapd_params" $hostapd_vap_conf_name $HOSTAPD_VAP_CONF_PREFIX
		remove_params_from_conf "$hostapd_hardcoded_params" $hostapd_vap_conf_name $HOSTAPD_VAP_CONF_PREFIX
	
		# Write the hostapd vap parameters.
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "disable_dgaf" "$disable_dgaf"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "anqp_domain_id" "$anqp_domain_id"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "hs20_operating_class" "$hs20_operating_class"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_ssid" "$osu_ssid"
		[ "$gas_comeback_delay" ] && set_conf_param hostapd_vap regular no_otf $pid $interface_name "gas_comeback_delay" "$gas_comeback_delay"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "access_network_type" "$access_network_type"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "internet" "$internet"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "venue_group" "$venue_group"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "venue_type" "$venue_type"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "hessid" "$hessid"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "network_auth_type" "$network_auth_type"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "ipaddr_type_availability" "$ipaddr_type_availability"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "domain_name" "$domain_name"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "anqp_3gpp_cell_net" "$anqp_3gpp_cell_net"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "hs20_deauth_req_timeout" "$hs20_deauth_req_timeout"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "manage_p2p" "$manage_p2p"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "allow_cross_connection" "$allow_cross_connection"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "tdls_prohibit" "$tdls_prohibit"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "interworking" "$interworking"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "hs20_wan_metrics" "$hs20_wan_metrics"

		################################################################
		# Sub-instances hostapd config:
		#
		echo "fapi_wlan_wave_hotspot_set: handle hs20_oper_friendly_name, OpFriendNameNumOfEntries=$OpFriendNameNumOfEntries" > /dev/console
		i=0
		while [ $i -lt $OpFriendNameNumOfEntries ]; do
			eval file_name=${HS20_CONF_OP_FRIEND_NAME}_${i}
			echo "fapi_wlan_wave_hotspot_set: handle OperatorFriendlyName, file_name=$file_name" > /dev/console
			if [ -e $file_name ]; then
			. $file_name
			echo "fapi_wlan_wave_hotspot_set: handle OperatorFriendlyName, get OperatorFriendlyName" > /dev/console
			hs20_oper_friendly_name=`db2fapi_convert regular OperatorFriendlyName $interface_index`
			echo "fapi_wlan_wave_hotspot_set: handle OperatorFriendlyName, set_conf_param with $hs20_oper_friendly_name" > /dev/console
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "hs20_oper_friendly_name" "$hs20_oper_friendly_name"
			echo "fapi_wlan_wave_hotspot_set: hs20_oper_friendly_name=$hs20_oper_friendly_name" > /dev/console
			fi
			i=$((i+1))
		done
		echo "fapi_wlan_wave_hotspot_set: handle venue_name, VenueNameNumOfEntries=$VenueNameNumOfEntries" > /dev/console
		i=0
		while [ $i -lt $VenueNameNumOfEntries ]; do
			eval file_name=${HS20_CONF_VENUE_NAME}_${i}
			echo "fapi_wlan_wave_hotspot_set: handle venue_name, file_name=$file_name" > /dev/console
			if [ -e $file_name ]; then
			. $file_name
			echo "fapi_wlan_wave_hotspot_set: handle venue_name, get VenueName" > /dev/console
			venue_name=`db2fapi_convert regular VenueName $interface_index`
			echo "fapi_wlan_wave_hotspot_set: handle venue_name, set_conf_param with $venue_name" > /dev/console
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "venue_name" "$venue_name"
			echo "fapi_wlan_wave_hotspot_set: venue_name=$venue_name" > /dev/console
			fi
			i=$((i+1))
		done
		echo "fapi_wlan_wave_hotspot_set: handle hs20_conn_capab, ConnectCapabNumOfEntries=$ConnectCapabNumOfEntries" > /dev/console
		i=0
		while [ $i -lt $ConnectCapabNumOfEntries ]; do
			eval file_name=${HS20_CONF_CAPAB_NAME}_${i}
			echo "fapi_wlan_wave_hotspot_set: handle hs20_conn_capab, file_name=$file_name" > /dev/console
			if [ -e $file_name ]; then
			. $file_name
			hs20_conn_capab=`db2fapi_convert_conn_capab $interface_index`
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "hs20_conn_capab" "$hs20_conn_capab"
			echo "fapi_wlan_wave_hotspot_set: hs20_conn_capab=$hs20_conn_capab" > /dev/console
			fi
			i=$((i+1))
		done
		echo "fapi_wlan_wave_hotspot_set: handle file_name, RoamingNumOfEntries=$RoamingNumOfEntries" > /dev/console
		i=0
		while [ $i -lt $RoamingNumOfEntries ]; do
			eval file_name=${HS20_CONF_ROAM}_${i}
			echo "fapi_wlan_wave_hotspot_set: handle file_name, file_name=$file_name" > /dev/console
			if [ -e $file_name ]; then
			. $file_name
			roaming_consortium=`db2fapi_convert regular RoamingConsortium $interface_index`
			roaming_consortium=`echo $roaming_consortium | sed 's/-//g'`
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "roaming_consortium" "$roaming_consortium"
			echo "fapi_wlan_wave_hotspot_set: roaming_consortium=$roaming_consortium" > /dev/console
			fi
			i=$((i+1))
		done
		echo "fapi_wlan_wave_hotspot_set: handle nai_realm, NAIrealmNumOfEntries=$NAIrealmNumOfEntries" > /dev/console
		i=0
		while [ $i -lt $NAIrealmNumOfEntries ]; do
			eval file_name=${HS20_CONF_NAIREALM}_${i}
			echo "fapi_wlan_wave_hotspot_set: handle nai_realm, file_name=$file_name" > /dev/console
			if [ -e $file_name ]; then
			. $file_name
			# format: <encoding>,<NAI Realm(s)>[,<EAP Method 1>][,<EAP Method 2>][,...]
			# Currently support only 2 EAP Methods
			Eap1=`db2fapi_convert regular EAPmethod1 $interface_index`
			if [ "$Eap1" = "0" ]; then
				Eap1Full=,13[5:6]
			elif [ "$Eap1" = "1" ]; then
				Eap1Full=,21[2:4][5:7]
			else
				Eap1Full=
			fi
			#
			Eap2=`db2fapi_convert regular EAPmethod2 $interface_index`
			if [ "$Eap2" = "0" ]; then
				Eap2Full=,13[5:6]
			elif [ "$Eap2" = "1" ]; then
				Eap2Full=,21[2:4][5:7]
			else
				Eap2Full=
			fi
			realm_name=`db2fapi_convert regular NAIrealmName $interface_index`
			nai_realm="0,$realm_name$Eap1Full$Eap2Full"
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "nai_realm" "$nai_realm"
			echo "fapi_wlan_wave_hotspot_set: nai_realm=$nai_realm" > /dev/console
			fi
			i=$((i+1))
		done
		echo "fapi_wlan_wave_hotspot_set: handle hs20_icon, OSUiconsNumOfEntries=$OSUiconsNumOfEntries" > /dev/console
		i=0
		while [ $i -lt $OSUiconsNumOfEntries ]; do
			eval file_name=${HS20_CONF_OSU_ICONS}_${i}
			echo "fapi_wlan_wave_hotspot_set: handle hs20_icon, file_name=$file_name" > /dev/console
			if [ -e $file_name ]; then
			. $file_name
			hs20_icon=`db2fapi_convert_osu_icons $interface_index`
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "hs20_icon" "$hs20_icon"
			echo "fapi_wlan_wave_hotspot_set: hs20_icon=$hs20_icon" > /dev/console
			fi
			i=$((i+1))
		done
		echo "fapi_wlan_wave_hotspot_set: handle OSUproviders, OSUprovidNumOfEntries=$OSUprovidNumOfEntries" > /dev/console
		i=0
		while [ $i -lt $OSUprovidNumOfEntries ]; do
			eval file_name=${HS20_CONF_OSU_PROVIDE}_${i}
			echo "fapi_wlan_wave_hotspot_set: handle OSUproviders, file_name=$file_name" > /dev/console
			if [ -e $file_name ]; then
			. $file_name
			osu_server_uri=`db2fapi_convert regular OSUProviderServerURI $interface_index`
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_server_uri" "$osu_server_uri"
			echo "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_server_uri=$osu_server_uri" > /dev/console
			osu_friendly_name=`db2fapi_convert regular OSUProviderFriendlyName $interface_index`
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_friendly_name" "$osu_friendly_name"
			echo "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_friendly_name=$osu_friendly_name" > /dev/console
			osu_friendly_name=`db2fapi_convert regular OSUProviderFriendlyName2 $interface_index`
			[ -n $osu_friendly_name ] && set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_friendly_name" "$osu_friendly_name"
			echo "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_friendly_name2=$osu_friendly_name" > /dev/console
			osu_nai=`db2fapi_convert regular OSUProviderNAI $interface_index`
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_nai" "$osu_nai"
			echo "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_nai=$osu_nai" > /dev/console
			osu_method_list=`db2fapi_convert regular OSUProviderMethodList $interface_index`
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_method_list" "$osu_method_list"
			echo "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_method_list=$osu_method_list" > /dev/console
			osu_icon=`db2fapi_convert regular OSUProviderIcon $interface_index`
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_icon" "$osu_icon"
			echo "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_icon=$osu_icon" > /dev/console
			osu_icon=`db2fapi_convert regular OSUProviderIcon2 $interface_index`
			[ -n $osu_icon ] && set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_icon" "$osu_icon"
			echo "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_icon2=$osu_icon" > /dev/console
			osu_service_desc=`db2fapi_convert regular OSUProviderServiceDescription $interface_index`
			set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_service_desc" "$osu_service_desc"
			echo "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_service_desc=$osu_service_desc" > /dev/console
			osu_service_desc=`db2fapi_convert regular OSUProviderServiceDescription2 $interface_index`
			[ -n $osu_service_desc ] && set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_service_desc" "$osu_service_desc"
			echo "fapi_wlan_wave_hotspot_set: OSU_PROVIDE: osu_service_desc2=$osu_service_desc" > /dev/console
			fi
			i=$((i+1))
		done
		# L2F - not hostapd param
	#fi
	
else
	##################################################################
	# Hotspot state not changed
	##################################################################
	echo "fapi_wlan_wave_hotspot_set: Check if a hostapd parameter was changed" > /dev/console
	# Check if a hostapd parameter was changed.
	hostapd_changed=`check_param_changed "$hostapd_params"`
	
	# If a hostapd vap parameter was changed, remove parameters from hostapd_vap temp conf file and write all of them with updated values.
	#if [ "$hostapd_changed" ]
	#then
		echo "fapi_wlan_wave_hotspot_set: Check if a hostapd parameter was changed" > /dev/console
		hostapd_vap_conf_name=${CONF_DIR}/hostapd_vap_${interface_name}_${pid}.conf
		remove_params_from_conf "###$comment $hostapd_params" $hostapd_vap_conf_name $HOSTAPD_VAP_CONF_PREFIX
		remove_params_from_conf "$hostapd_hardcoded_params" $hostapd_vap_conf_name $HOSTAPD_VAP_CONF_PREFIX
	
		# Write the hostapd vap parameters.
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "disable_dgaf" "$disable_dgaf"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "anqp_domain_id" "$anqp_domain_id"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "hs20_operating_class" "$hs20_operating_class"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "osu_ssid" "$osu_ssid"
		[ "$gas_comeback_delay" ] && set_conf_param hostapd_vap regular no_otf $pid $interface_name "gas_comeback_delay" "$gas_comeback_delay"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "access_network_type" "$access_network_type"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "internet" "$internet"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "venue_group" "$venue_group"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "venue_type" "$venue_type"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "hessid" "$hessid"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "network_auth_type" "$network_auth_type"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "ipaddr_type_availability" "$ipaddr_type_availability"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "domain_name" "$domain_name"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "anqp_3gpp_cell_net" "$anqp_3gpp_cell_net"
	#fi

	# interworking and access_network_type are also set in ap set script.
	mbo=`db2fapi_convert boolean WaveMBOEnabled $interface_index`
	if [ "$mbo" = "1" ]
	then
		interworking=1
		access_network_type=0
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "interworking" "$interworking"
		set_conf_param hostapd_vap regular no_otf $pid $interface_name "access_network_type" "$access_network_type"
	fi
fi


echo "fapi_wlan_wave_hotspot_set: Read needed parameters for other hotsopt components...etc." > /dev/console
## Read needed parameters for other hotsopt components
proxy_arp=`db2fapi_convert boolean ProxyArp $interface_index`
disable_dgaf=`db2fapi_convert boolean DgafDisabled $interface_index`
wan_metrics_duration=`db2fapi_convert regular WanMetricsDuration $interface_index`
wan_port=`db2fapi_convert regular WanPort $interface_index`
ap_isolate=`db2fapi_convert boolean IsolationEnable $interface_index`

echo "proxy_arp=$proxy_arp, disable_dgaf=$disable_dgaf, wan_metrics_duration=$wan_metrics_duration, wan_port=$wan_port, ap_isolate=$ap_isolate " > /dev/console

# TODO- No change on L2FwEnabled when add L2F rule !!! Whow should set this???


#######################################################################
# L2F
#######################################################################
# Compare previous to new rules
# -Case rule change (Add/Del/Modify call fapi_wlan_wave_firewall_conf_change):
# -- Delete all rules
# -- Add all rules
# -Case status change...

l2f_status_change_detect()
{
	index=$1
		
	# Test change in l2f Enable (HS20_CONF file):
	enable=`cat ${HS20_CONF}_${index} | grep ${param_name}_${index}`
	enable=${enable##*=}
	param_before=`cat ${HS20_CONF}_${index}_old | grep ${param_name}_${index}`
	param_before=${param_before##*=}
	if [ "$enable" != "$param_before" ]
	then
		echo "l2f_status_change_detect: L2F Status change ($enable=$$enable, param_before=$param_before)" > /dev/console
		echo 1
		return		
	fi
	echo 0
}

compare_l2f_files()
{
	index=$1
	file_differs=0
	
	# Test for number of lines:
	num_lines_old=`cat ${HS20_CONF_L2F_FW}_${index}_old | sed '/^\s*$/d' | wc -l`
	num_lines=`cat ${HS20_CONF_L2F_FW}_${index} | sed '/^\s*$/d' | wc -l`
	if [ "$num_lines_old" != "$num_lines" ]
	then
		file_differs=1
		echo "Different num lines, file_differs=$file_differs" > /dev/console
		echo $file_differs
		return
	fi
	
	# Test for change in rule:
	while read line
	do
		line_tmp=`echo $line | grep -vE '^(\s*$|#)'`
		if [ -z "$line_tmp" ]
		then
			#echo "Empty line continue" > /dev/console
			continue
		fi
		#echo "line=$line" > /dev/console
		while read line2
		do
		flag=0
	    
		line_tmp=`echo $line | grep -vE '^(\s*$|#)'`
		if [ -z "$line_tmp" ]
		then
			#echo "Empty, break" > /dev/console
			break
		fi
		# Set flag, clear if line found
		flag=1
	    
		#echo "line2=$line2" > /dev/console
		if [ ! -z "$line" ] && [ ! -z "$line" ] && [ "$line" = "$line2" ]
		then
			#echo "same line, clear flag, break" > /dev/console
			flag=0
			break
		fi
		done < ${HS20_CONF_L2F_FW}_${index}_old
		if [ $flag -eq 1 ]
		then
			file_differs=1
			break
		fi
	done < ${HS20_CONF_L2F_FW}_${index}
	
	#echo "file_differs=$file_differs" > /dev/console
	echo $file_differs
}


l2_fw_ena=1 # TODO: FIX- This is a Workaround...!!!!!!!!!!!!!!!!
#l2_fw_ena=`db2fapi_convert boolean L2FwEnabled $interface_index`


##
# Handle rules
#
if [ -e ${HS20_CONF_L2F_FW}_${interface_index} ] && [ -e ${HS20_CONF_L2F_FW}_${interface_index}_old ]
then
	# Test for any change
	echo "fapi_wlan_wave_hotspot_set: Both HS20_CONF_L2F_FW exist" > /dev/console
	l2_fw_changed=`compare_l2f_files $interface_index`
elif [ -e ${HS20_CONF_L2F_FW}_${interface_index} ]
then
	#First time l2f set, set l2_fw_changed
	l2_fw_changed=1
else
	echo "fapi_wlan_wave_hotspot_set: None HS20_CONF_L2F_FW exist" > /dev/console
	l2_fw_changed=0
fi

echo "l2_fw_changed=$l2_fw_changed" > /dev/console


#######################################################################
# L2F: Handle status change
#

if [ "$l2_fw_changed" = "1" ]
then
	if [ -n "$l2_fw_ena" ] && [ "$l2_fw_ena" = "1" ]
	then
		echo "Call ALUMNUS_HS20_CONFIG_FILE with L2F ENABLE" > /dev/console
		#[ -e $L2F_CTRL_SCRIPT ] && set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "(. $L2F_CTRL_SCRIPT" "enable $interface_name)"
		set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli L2F -O ENABLE" "-I $interface_name"
		add_replace_command hs_cli L2F -O ENABLE -I $interface_name
	elif [ -n "$l2_fw_ena" ]
	then
		echo "Call ALUMNUS_HS20_CONFIG_FILE with L2F DISABLE" > /dev/console
		#[ -e $L2F_CTRL_SCRIPT ] && set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "(. $L2F_CTRL_SCRIPT" "disable $interface_name)"
		set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli L2F -O DISABLE" "-I $interface_name"
		add_replace_command hs_cli L2F -O DISABLE -I $interface_name
	fi
else
	if [ -n "$l2_fw_ena" ] && [ "$l2_fw_ena" = "1" ]
	then
		#Always enable after down, unless it is disabled
		echo "Enable after down: Call ALUMNUS_HS20_CONFIG_FILE with L2F ENABLE" > /dev/console
		set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli L2F -O ENABLE" "-I $interface_name"
		add_replace_command hs_cli L2F -O ENABLE -I $interface_name
	fi
fi


if [ "$l2_fw_changed" = "1" ]
then
	# Delete all rules, then add all rules
	echo "fapi_wlan_wave_hotspot_set: TODO: Delete all rules, then add all rules ..." > /dev/console
	# TODO- change name to fapi_wlan_wave_firewall_conf_change
	(. /opt/lantiq/wave/scripts/fapi_wlan_wave_firewall_conf_change $interface_name $pid)
fi

####################################################################
# L2F END
####################################################################

# Start/stop/configure other hotspot components
if [ $hs20_mode -gt $HS20_MODE_DISABLED ] && [ -n "$proxy_arp" ]
then
	parp_cmd="DISABLE"
	disable_dgaf_str="DGAF_ENABLE"

	[ "$disable_dgaf" = "1" ] && disable_dgaf_str="DGAF_DISABLE"
	[ "$proxy_arp" = "1" ] && parp_cmd="ENABLE"
	echo "fapi_wlan_wave_hotspot_set: parp_cmd=$parp_cmd, disable_dgaf_str=$disable_dgaf_str" > /dev/console

	echo "Call ALUMNUS_HS20_CONFIG_FILE with PARP $parp_cmd" > /dev/console
	#[ -e $PARP_CTRL_SCRIPT ] && set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "(. $PARP_CTRL_SCRIPT" "$parp_cmd $interface_name)"
	#[ -e $DGAF_DISABLE_SCRIPT ] && set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "(. $DGAF_DISABLE_SCRIPT" "$interface_name $disable_dgaf)"
	set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli PARP -O $parp_cmd" "-I $interface_name"
	add_replace_command hs_cli PARP -O $parp_cmd -I $interface_name
	# TODO: test L2F enabled before call:
	set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli L2F -O $disable_dgaf_str" "-I $interface_name"
	add_replace_command hs_cli L2F -O $disable_dgaf_str -I $interface_name
fi

if [ -n "$hs20_mode" ] && [ "$hs20_mode" = "$HS20_MODE_ENABLED" ]
then
	###########################################
	# TODO: Replace by Notifications !!!!!!!!!!
	###########################################
	[ -e $WMDCTRL_SCRIPT ] && set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "(. $WMDCTRL_SCRIPT" "set duration $wan_metrics_duration)"
	[ -e $WMDCTRL_SCRIPT ] && set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "(. $WMDCTRL_SCRIPT" "set wlan name=$interface_name w_active=1 wans=$wan_port)"
	[ -e $WMDCTRL_SCRIPT ] && set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "(. $WMDCTRL_SCRIPT" "enable $interface_name)"
elif [ -n "$hs20_mode" ]
then
	###########################################
	# TODO: Replace by Notifications !!!!!!!!!!
	###########################################
	[ -e $WMDCTRL_SCRIPT ] && set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "(. $WMDCTRL_SCRIPT" "disable $interface_name)"
fi

if [ $hs20_mode -gt $HS20_MODE_DISABLED ] && [ -n "$ap_isolate" ]
then
	ap_isolate_cmd="DISABLE"
	[ "$ap_isolate" = "1" ] && ap_isolate_cmd="ENABLE"
	#[ -e $HAIRPIN_CONFIG_SCRIPT ] && set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "(. $HAIRPIN_CONFIG_SCRIPT" "$ap_isolate_cmd $interface_name)"
	# Any ap_isolate_cmd config needed for HAIRPIN via hs_cli ?
	set_conf_param $ALUMNUS_HS20_CONFIG_FILE alumnus otf $pid $interface_name "hs_cli HS -O $ap_isolate_cmd" "-I $interface_name"
	add_replace_command hs_cli HS -O $ap_isolate_cmd -I $interface_name
fi


# Configuration is completed successfully
if [ "$updateHessid" = "1" ]; then
	update_conf_out "Object_${hs20_index}" "$ACCESSPOINT_HS20_VENDOR_OBJECT"
	update_conf_out "HESSID_${hs20_index}" "$hessid"
fi
update_conf_out "wlan_configuration_status" "success"

# DEBUG: set debug_save_conf in fapi_wlan_wave_lib_common.sh to save the out conf file
[ "$debug_save_conf" ] && cp ${OUT_CONF} ${CONF_DIR}/hotspot_set_out_conf_${interface_name}


print2log $radio_index DEBUG "$script_name done"
timestamp $radio_index "$script_name:done"
